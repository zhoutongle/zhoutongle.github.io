<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>同乐的博客</title>
  <icon>https://www.gravatar.com/avatar/b16535add2f10556a0a6875caf4510e6</icon>
  <subtitle>简单的程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-25T03:38:02.124Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>饕餮之影</name>
    <email>zhoutongle_123@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于git提交代码</title>
    <link href="http://yoursite.com/2019/05/22/%E5%85%B3%E4%BA%8Egit%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2019/05/22/关于git提交代码/</id>
    <published>2019-05-22T03:28:25.000Z</published>
    <updated>2019-05-25T03:38:02.124Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>以下步骤是基于我公司的环境，你可以参考使用。</strong></p></blockquote><p>1.首先要从git服务器下载digioceanfs_manager管理系统源代码必须现在git服务器上添加自己的ssh密钥，配置好密钥再去下载代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone ssh://zhoutongle@10.10.1.13:29418/MGMT</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>2.这里提交的时候需要拷贝glusterfs的一个文件到当前项目.git/hooks/目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp ~/glusterfs/.git/hooks/commit-msg   /root/MGMT/.git/hooks/ </span><br><span class="line">chmod +x commit-msg</span><br></pre></td></tr></table></figure></p><p>3.配置好身份认证后，去创建一个自己bug的分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b bug_branch_name</span><br></pre></td></tr></table></figure></p><p>4.配置好ssh密钥后，现在去配置身份认证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name &quot;zhoutongle&quot;</span><br><span class="line">git config user.email &quot;zhoutongle@estor.com.cn&quot;</span><br></pre></td></tr></table></figure></p><p>5.然后去修改自己要修改的代码文件<br>6.add添加文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add . </span><br><span class="line">or</span><br><span class="line">git add *</span><br></pre></td></tr></table></figure></p><p>7.commit已经add的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -s</span><br></pre></td></tr></table></figure></p><p>8.如果继续修改这个文件再次 commit<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -s --amend</span><br></pre></td></tr></table></figure></p><p>9.然后将commit的代码push到远端。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin HEAD:refs/for/CentOS-7-X86/rfc</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@node-1 MGMT]# git branch -a    显示所有分支</span><br><span class="line">  CentOS-7-X86</span><br><span class="line">  master</span><br><span class="line">* test</span><br><span class="line">  remotes/origin/2.0</span><br><span class="line">  remotes/origin/C7-devel</span><br><span class="line">  remotes/origin/CentOS-7-ARM</span><br><span class="line">  remotes/origin/CentOS-7-X86</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout  CentOS-7-X86  切换到分支CentOS-7-X86</span><br><span class="line">git checkout -b test  创建分支test在 CentOS-7-X86</span><br><span class="line">git reset --hard ff648831a9547afb2d6e96213760d445aeb9e514</span><br></pre></td></tr></table></figure><p>1.如果出现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: missing Change-Id in commit message footer</span><br></pre></td></tr></table></figure></p><p>直接在命令行加入报错的红色部分，再按照一下步骤来就ok了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitdir=$(git rev-parse --git-dir); scp -p -P 29418 zhoutongle@10.10.1.13:hooks/commit-msg $&#123;gitdir&#125;/hooks/</span><br></pre></td></tr></table></figure></p><p>2.下载一份代码，修改之后提交代码，不小心把代码删除了，而无法进行追加提交的问题。<br>重新下载代码，下载补丁:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 90792628c1bd03c0245813057cfee361cae80094    （commit）</span><br></pre></td></tr></table></figure></p><p>翻滚到之前的版本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin CentOS-7-X86</span><br></pre></td></tr></table></figure></p><p>3.合并的分支产生冲突问题。<br> 当你提交的代码后，管理员发现，您的代码不能提交到服务器上，主要原因在于，你的commit 中和服务器中的有些commit不再同一时间轴上，即：你的有些commit要插入到服务器中的某些commit之间，这样就会造成代码的冲突。所以这个 时候就要使用git rebase。<br> 假如，你平时使用的分支叫 new ，然后在这个分支上你刚提交过几个commit。<br> 做法：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.新建一个分支，并且代码和服务器中代码同步</span><br><span class="line">git checkout origin/v2.0 -b temp</span><br><span class="line">2.为了保证新建的temp分支代码是最新的，可以多执行下面一步</span><br><span class="line">git pull</span><br><span class="line">3.当你新建分支后，系统会自动checkout到temp分支上，此时</span><br><span class="line">git checkout  new</span><br><span class="line">4.合并代码，并整理</span><br><span class="line">git rebase  temp  //会将temp分支的代码合并过来，并按照提交的顺序排序</span><br><span class="line">5.因为顺序是重新整理的，所以肯定会出现冲突</span><br><span class="line">6.解决冲突，最后 </span><br><span class="line">git add *</span><br><span class="line">，但不需要</span><br><span class="line">git commit</span><br><span class="line">7.解决后，执行</span><br><span class="line">git rebase --continue</span><br><span class="line">8.重新提交代码： </span><br><span class="line">git push for-</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;以下步骤是基于我公司的环境，你可以参考使用。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.首先要从git服务器下载digioceanfs_manager管理系统源代码必须现在git服务器上添加自己的ssh密钥，配置好密钥再去下载代码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git clone ssh://zhoutongle@10.10.1.13:29418/MGMT&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>换电脑继续更新用hexo和github搭建的blog</title>
    <link href="http://yoursite.com/2018/05/14/%E6%8D%A2%E7%94%B5%E8%84%91%E7%BB%A7%E7%BB%AD%E6%9B%B4%E6%96%B0%E7%94%A8hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E7%9A%84blog/"/>
    <id>http://yoursite.com/2018/05/14/换电脑继续更新用hexo和github搭建的blog/</id>
    <published>2018-05-14T06:56:33.000Z</published>
    <updated>2019-05-23T07:26:35.297Z</updated>
    
    <content type="html"><![CDATA[<p>我之前用hexo，git搭建一个自己的blog，最早是放在公司的电脑，后来想在自己<br>的电脑上继续更新blog，<br>于是在网上找到一个替换的方法。</p><ol><li>安装node.json<br>下载完成，一直下一步就可以了<a id="more"></a></li><li>安装git。去Git官网根据你的电脑参数，下载对应版本。</li><li>安装hexo<br>创建一个新的目录blog，在 blog中执行： npm install hexo-ci –g<br>npm install hexo-deployer-git –save<br>执行第一个命令，返回结果：<br>执行第二个命令，返回结果：<br>返回有警告不影响，安装成功了。</li><li>hexo初始化配。<br>在blog目录下创建一个hexo目录，执行hexo init，生成的目录如下 ：</li><li>配置SSH密钥。<br>如果电脑上没有密钥，就自己生成一个，cd  ~/.ssh查看密钥是否存在，如果没有执行<br>ssh-keygen –t rsa  -C your_email@example.com直接回车，clip &lt; ~/.ssh/id_rsa.<br>pub<br>将公钥复制到粘贴板中。登陆git</li></ol><p>添加密钥。最后在执行ssh –T git@gittub.com检查是否成功，成功的显示如下，</p><p>其他步骤如下：<br>来源链接：<a href="https://www.zhihu.com/question/21193762/answer/103097754" target="_blank" rel="noopener">https://www.zhihu.com/question/21193762/answer/103097754</a></p><p>不知道题主是不是换了新电脑，需要在新电脑上进行部署，如果是，可以参考下面的<br>方法：</p><ol><li>从官网Git下载git，在新电脑上安装，因为https速度慢，而且每次都要输入口令，常用的是使用ssh。<br>使用下面方法创建：<ol><li>打开git bash，在用户主目录下运行：ssh-keygen -t rsa -C “youremail@example.com” 把其中的<br>邮件地址换成自己的邮件地址，然后一路回车</li><li>最后完成后，会在用户主目录下生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是<br>SSH key密钥对，id_rsa是私钥，千万不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</li><li>登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意<br>Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add SSH Key」<br>，你就应该看到已经添加的Key。<br>注意：不要在git版本库中运行ssh，然后又将它提交，这样就把密码泄露出去了。</li></ol></li><li>下载Node.js，并安装</li><li>打开git bash客户端，输入 npm install hexo-cli -g，开始安装hexo</li><li>下面就将原来的文件拷贝到新电脑中，但是要注意哪些文件是必须的，哪些文件是可以删除的。<ol><li>讨论下哪些文件是必须拷贝的：首先是之前自己修改的文件，像站点配置_config.yml，theme文件<br>夹里面的主题，以及source里面自己写的博客文件，这些肯定要拷贝的。除此之外，还有三个文件需要有，就是<br>scaffolds文件夹（文章的模板）、package.json（说明使用哪些包）和.gitignore（限定在提交的时候哪些文<br>件可以忽略）。其实，这三个文件不是我们修改的，所以即使丢失了，也没有关系，我们可以建立一个新的文件<br>夹，然后在里面执行hexo init，就会生成这三个文件，我们只需要将它们拷贝过来使用即可。总结：_config.yml<br>，theme/，source/，scaffolds/，package.json，.gitignore，是需要拷贝的。</li><li>再讨论下哪些文件是不必拷贝的，或者说可以删除的：首先是.git文件，无论是在站点根目录下，还是<br>主题目录下的.git文件，都可以删掉。然后是文件夹node_modules（在用npm install会重新生成），public（这<br>个在用hexo g时会重新生成），.deploy_git文件夹（在使用hexo d时也会重新生成），db.json文件。其实上面<br>这些文件也就是.gitignore文件里面记载的可以忽略的内容。总结：.git/，node<em>modules/，public/，.deploy</em><br>git/，db.json文件需要删除。</li></ol></li><li>在git bash中切换目录到新拷贝的文件夹里，使用 npm install 命令，进行模块安装。很明显我们这里没<br>用hexo init初始化，因为有的文件我们已经拷贝生成过来了，所以不必用hexo init去整体初始化，如果不慎在此<br>时用了hexo init，则站点的配置文件_config.yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用<br>hexo init。</li><li>安装其他的一些必要组件，如果在node_modules里面有的，就不要重复安装了：<ol><li>为了使用hexo d来部署到git上，需要安装<br>npm install hexo-deployer-git –save</li><li>为了建立RSS订阅，需要安装<br>npm install hexo-generator-feed –save</li><li>为了建立站点地图，需要安装<br>npm install hexo-generator-sitemap –save<br>插件安装后，有的需要对配置文件_config.yml进行配置，具体怎么配置，可以参考上面插件在github主页<br>上的具体说明</li></ol></li><li>使用hexo g，然后使用hexo d进行部署，如果都没有出错，就转移成功了！</li></ol><blockquote><p><strong>这种方法太麻烦，下面有个更好的办法</strong></p></blockquote><p>Hexo生成的文件里面是有一个.gitignore的，所以它的本意应该也是想我们把这些文件放到GitHub上存放的。但是考虑到如果每个GitHub Pages都需要额外的一个仓库存放这些文件，就显得特别冗余了。这个时候就可以用分支的思路！一个分支用来存放Hexo生成的网站原始的文件，另一个分支用来存放生成的静态网页。</p><p>最近我也用GitHub Pages搭建了一个独立博客，想到了这个方法，使用之后真的特别简洁。为了更直观地说明，奉上使用这种方法不同时候的流程：</p><hr><p>一、关于搭建的流程</p><ol><li>创建仓库，<a href="http://zhoutongle.github.io；" target="_blank" rel="noopener">http://zhoutongle.github.io；</a></li><li>创建两个分支：master 与 hexo；</li><li>设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</li><li>使用git clone git@github.com:zhoutongle.github.io.git拷贝仓库；</li><li>在本地<a href="http://zhoutongle.github.io文件夹下通过Git" target="_blank" rel="noopener">http://zhoutongle.github.io文件夹下通过Git</a> bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;</li><li>修改_config.yml中的deploy参数，分支应为master；</li><li>依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；</li><li>执行hexo g -d生成网站并部署到GitHub上。</li></ol><p>这样一来，在GitHub上的<a href="http://CrazyMilk.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美(" target="_blank" rel="noopener">http://CrazyMilk.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美(</a> •̀ ω •́ )y！</p><p>二、关于日常的改动流程<br>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理。</p><ol><li>依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）；</li><li>然后才执行hexo g -d发布网站到master分支上。</li></ol><p>虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p><p>三、本地资料丢失后的流程<br>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p><ol><li>使用git clone git@github.com:zhoutongle.github.io.git拷贝仓库（默认分支为hexo）；</li><li>在本地新拷贝的<a href="http://zhoutongle.github.io文件夹下通过Git" target="_blank" rel="noopener">http://zhoutongle.github.io文件夹下通过Git</a> bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我之前用hexo，git搭建一个自己的blog，最早是放在公司的电脑，后来想在自己&lt;br&gt;的电脑上继续更新blog，&lt;br&gt;于是在网上找到一个替换的方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装node.json&lt;br&gt;下载完成，一直下一步就可以了
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>火狐和谷歌加载页面的差异</title>
    <link href="http://yoursite.com/2018/01/02/%E7%81%AB%E7%8B%90%E5%92%8C%E8%B0%B7%E6%AD%8C%E5%8A%A0%E8%BD%BD%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%B7%AE%E5%BC%82/"/>
    <id>http://yoursite.com/2018/01/02/火狐和谷歌加载页面的差异/</id>
    <published>2018-01-02T08:22:58.000Z</published>
    <updated>2019-05-22T09:37:52.134Z</updated>
    
    <content type="html"><![CDATA[<p>在加载页面时，火狐和谷歌存在这微小的差异，这些小问题如果不注意将困扰你很久。<br>1.页面加载时，火狐会将子窗口先加载完再加载父窗口；而谷歌会先将主页面加载完，执行了主页面的初始化方法，再加载子页面，执行子页面的初始化方法。</p><p>2.event.x在火狐中是不支持的，而谷歌却可以使用。<br><a id="more"></a><br>3.火狐中的事件对象需要预先定义，不能直接使用event，而谷歌可以。</p><p>4.火狐和IE可以使用document.documentElement.scrollTop获取滚动条高度，而谷歌只能用document.body.scrollTop。</p><p>5.火狐中innerText是获取不到文本的。谷歌却可以。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在加载页面时，火狐和谷歌存在这微小的差异，这些小问题如果不注意将困扰你很久。&lt;br&gt;1.页面加载时，火狐会将子窗口先加载完再加载父窗口；而谷歌会先将主页面加载完，执行了主页面的初始化方法，再加载子页面，执行子页面的初始化方法。&lt;/p&gt;
&lt;p&gt;2.event.x在火狐中是不支持的，而谷歌却可以使用。&lt;br&gt;
    
    </summary>
    
    
      <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
</feed>
